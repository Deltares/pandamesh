
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gmsh-basic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gmsh-basic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gmsh-basic.py:


Basic Gmsh Example
======================

In this example we'll create some basic geometries and turn them into meshes.
to illustrate some of the mesh generation features that Gmsh provides in
combination with polygon, point, and linestring geometries represented by
geopandas.

The :py:class:`GmshMesher` supports the geometry show in the basic Triangle
example. Not all of those are repeated here, rather we focus on some of the
additional features that Gmsh provides.

.. GENERATED FROM PYTHON SOURCE LINES 15-21

.. code-block:: default

    import geopandas as gpd
    import matplotlib.pyplot as plt
    import shapely.geometry as sg

    import pandamesh as pm





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.9.9/x64/lib/python3.9/site-packages/geopandas/_compat.py:111: UserWarning: The Shapely GEOS version (3.9.1-CAPI-1.14.2) is incompatible with the GEOS version PyGEOS was compiled with (3.10.0-CAPI-1.16.0). Conversions between both will be slow.
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 22-27

A simple rectangular mesh
-------------------------

The most simple example is perhaps a rectangle. We'll create a vector
geometry, store this in a geodataframe, and associate a cell size.

.. GENERATED FROM PYTHON SOURCE LINES 27-39

.. code-block:: default


    polygon = sg.Polygon(
        [
            [0.0, 0.0],
            [10.0, 0.0],
            [10.0, 10.0],
            [0.0, 10.0],
        ]
    )
    gdf = gpd.GeoDataFrame(geometry=[polygon])
    gdf["cellsize"] = 2.0








.. GENERATED FROM PYTHON SOURCE LINES 40-44

We'll use this polygon to generate a mesh. We start by initializing a
TriangleMesher, which is a simple wrapper around the Python bindings to the
Gmsh C++-library. This wrapper extracts the coordinates and presents them
in the appropriate manner for Gmsh.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

.. code-block:: default


    mesher = pm.GmshMesher(gdf)
    vertices, triangles = mesher.generate()
    pm.plot(vertices, triangles)




.. image-sg:: /examples/images/sphx_glr_gmsh-basic_001.png
   :alt: gmsh basic
   :srcset: /examples/images/sphx_glr_gmsh-basic_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 50-53

As the name suggests, Triangle only generates triangular meshes. Gmsh is
capable of generating quadrilateral-dominant meshes, and has a lot more bells
and whistles for defining cellsizes.

.. GENERATED FROM PYTHON SOURCE LINES 53-68

.. code-block:: default


    line = sg.LineString([(2.0, 8.0), (8.0, 2.0)])
    gdf = gpd.GeoDataFrame(geometry=[polygon, line])
    gdf["cellsize"] = [2.0, 0.2]

    fig, (ax0, ax1) = plt.subplots(ncols=2)

    mesher = pm.TriangleMesher(gdf)
    vertices, triangles = mesher.generate()
    pm.plot(vertices, triangles, ax=ax0)

    mesher = pm.GmshMesher(gdf)
    vertices, triangles = mesher.generate()
    pm.plot(vertices, triangles, ax=ax1)




.. image-sg:: /examples/images/sphx_glr_gmsh-basic_002.png
   :alt: gmsh basic
   :srcset: /examples/images/sphx_glr_gmsh-basic_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.9.9/x64/lib/python3.9/site-packages/pygeos/io.py:72: UserWarning: The shapely GEOS version (3.9.1-CAPI-1.14.2) is incompatible with the PyGEOS GEOS version (3.10.0-CAPI-1.16.0). Conversions between both will be slow
      warnings.warn(
    /opt/hostedtoolcache/Python/3.9.9/x64/lib/python3.9/site-packages/geopandas/geodataframe.py:1351: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead

    See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
      super().__setitem__(key, value)




.. GENERATED FROM PYTHON SOURCE LINES 69-77

Gmsh allows for specifying cell sizes not just on polygons (regions) like
Triangle (left), but on individual vertices as well, as is visible around the
diagonal (right).

Defaults
--------

The GmshMesher class is initialized with a number of default parameters:

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: default


    print(mesher)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    GmshMesher
        current_field_id = 1
        fields_list = []
        distance_fields_list = []
        fields = Empty GeoDataFrame
    Columns: []
    Index: []
        tmpdir = <TemporaryDirectory '/tmp/tmpkbm1p1h3'>
        recombine_all = False
        characteristic_length_from_boundary = True
        characteristic_length_from_points = True
        characteristic_length_from_curvature = False
        field_combination = FieldCombination.MIN
        subdivision_algorithm = 0




.. GENERATED FROM PYTHON SOURCE LINES 81-85

Quadrilateral meshes
--------------------

It is also capable of generating quadrilateral (dominant) meshes:

.. GENERATED FROM PYTHON SOURCE LINES 85-94

.. code-block:: default


    gdf = gpd.GeoDataFrame(geometry=[polygon])
    gdf["cellsize"] = 2.0
    mesher = pm.GmshMesher(gdf)
    mesher.recombine_all = True
    vertices, faces = mesher.generate()

    pm.plot(vertices, faces)




.. image-sg:: /examples/images/sphx_glr_gmsh-basic_003.png
   :alt: gmsh basic
   :srcset: /examples/images/sphx_glr_gmsh-basic_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-100

Writing to file
---------------
It's also possible to use the Python bindings to write a Gmsh ``.msh`` file.
This file can be opened using the Gmsh GUI to e.g. inspect the generated
mesh.

.. GENERATED FROM PYTHON SOURCE LINES 100-102

.. code-block:: default


    mesher.write("my-mesh.msh")








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.982 seconds)


.. _sphx_glr_download_examples_gmsh-basic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: gmsh-basic.py <gmsh-basic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: gmsh-basic.ipynb <gmsh-basic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

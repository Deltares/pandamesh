
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gmsh-basic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gmsh-basic.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gmsh-basic.py:


Basic Gmsh Example
======================

In this example we'll create some basic geometries and turn them into meshes.
to illustrate some of the mesh generation features that Gmsh provides in
combination with polygon, point, and linestring geometries represented by
geopandas.

The :py:class:`GmshMesher` supports the geometry show in the basic Triangle
example and has a number of additional features.

.. GENERATED FROM PYTHON SOURCE LINES 14-21

.. code-block:: Python

    import geopandas as gpd
    import matplotlib.pyplot as plt
    import numpy as np
    import shapely.geometry as sg

    import pandamesh as pm








.. GENERATED FROM PYTHON SOURCE LINES 22-27

A simple rectangular mesh
-------------------------

The most simple example is perhaps a rectangle. We'll create a vector
geometry, store this in a geodataframe, and associate a cell size.

.. GENERATED FROM PYTHON SOURCE LINES 27-39

.. code-block:: Python


    polygon = sg.Polygon(
        [
            [0.0, 0.0],
            [10.0, 0.0],
            [10.0, 10.0],
            [0.0, 10.0],
        ]
    )
    gdf = gpd.GeoDataFrame(geometry=[polygon])
    gdf["cellsize"] = 2.0








.. GENERATED FROM PYTHON SOURCE LINES 40-44

We'll use this polygon to generate a mesh. We start by initializing a
TriangleMesher, which is a simple wrapper around the Python bindings to the
Gmsh C++-library. This wrapper extracts the coordinates and presents them
in the appropriate manner for Gmsh.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

.. code-block:: Python


    mesher = pm.GmshMesher(gdf)
    vertices, triangles = mesher.generate()
    pm.plot(vertices, triangles)




.. image-sg:: /examples/images/sphx_glr_gmsh-basic_001.png
   :alt: gmsh basic
   :srcset: /examples/images/sphx_glr_gmsh-basic_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 50-53

As the name suggests, Triangle only generates triangular meshes. Gmsh is
capable of generating quadrilateral-dominant meshes, and has a lot more bells
and whistles for defining cellsizes.

.. GENERATED FROM PYTHON SOURCE LINES 53-68

.. code-block:: Python


    line = sg.LineString([(2.0, 8.0), (8.0, 2.0)])
    gdf = gpd.GeoDataFrame(geometry=[polygon, line])
    gdf["cellsize"] = [2.0, 0.5]

    fig, (ax0, ax1) = plt.subplots(ncols=2)

    mesher = pm.TriangleMesher(gdf)
    vertices, triangles = mesher.generate()
    pm.plot(vertices, triangles, ax=ax0)

    mesher = pm.GmshMesher(gdf)
    vertices, triangles = mesher.generate()
    pm.plot(vertices, triangles, ax=ax1)




.. image-sg:: /examples/images/sphx_glr_gmsh-basic_002.png
   :alt: gmsh basic
   :srcset: /examples/images/sphx_glr_gmsh-basic_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-77

Gmsh allows for specifying cell sizes not just on polygons (regions) like
Triangle (left), but on individual vertices as well, as is visible around the
diagonal (right).

Defaults
--------

The GmshMesher class is initialized with a number of default parameters:

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: Python


    print(mesher)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    GmshMesher
        current_field_id = 1
        fields_list = []
        distance_fields_list = []
        fields = Empty GeoDataFrame
    Columns: []
    Index: []
        tmpdir = <TemporaryDirectory '/tmp/tmpbr8obb5c'>
        recombine_all = False
        mesh_size_extend_from_boundary = True
        mesh_size_from_points = True
        mesh_size_from_curvature = False
        field_combination = FieldCombination.MIN
        subdivision_algorithm = 0
        force_geometry = False
        general_verbosity = 0




.. GENERATED FROM PYTHON SOURCE LINES 81-88

The parameters of Gmsh differ from Triangle, but they work the same: they can
be altered after initialization to control the triangulation.

Forcing points, lines, local refinement
---------------------------------------

We can force points and lines into the triangulation:

.. GENERATED FROM PYTHON SOURCE LINES 88-115

.. code-block:: Python


    outer = [(0.0, 0.0), (10.0, 0.0), (10.0, 10.0), (0.0, 10.0)]
    inner = [(3.0, 3.0), (7.0, 3.0), (7.0, 7.0), (3.0, 7.0)]
    donut = sg.Polygon(shell=outer, holes=[inner])
    refined = sg.Polygon(inner)

    y = np.arange(0.5, 10.0, 0.5)
    x = np.full(y.size, 1.0)
    points = gpd.points_from_xy(x, y)

    line = sg.LineString(
        [
            [9.0, 2.0],
            [9.0, 8.0],
        ]
    )

    gdf = gpd.GeoDataFrame(geometry=[donut, refined, line, *points])
    gdf["cellsize"] = [2.0, 0.5, 2.0] + (len(points) * [2.0])

    mesher = pm.GmshMesher(gdf)
    vertices, triangles = mesher.generate()

    fig, ax = plt.subplots()
    pm.plot(vertices, triangles, ax=ax)
    gdf.plot(facecolor="none", edgecolor="red", ax=ax)




.. image-sg:: /examples/images/sphx_glr_gmsh-basic_003.png
   :alt: gmsh basic
   :srcset: /examples/images/sphx_glr_gmsh-basic_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: >



.. GENERATED FROM PYTHON SOURCE LINES 116-122

Quadrilateral meshes
--------------------

One of the features of Gmsh is that it is also capable of generating
quadrilateral (dominant) meshes, by recombining triangles. We can achieve
this by changing a parameter on the mesher:

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    gdf = gpd.GeoDataFrame(geometry=[polygon])
    gdf["cellsize"] = 2.0
    mesher = pm.GmshMesher(gdf)
    mesher.recombine_all = True
    vertices, faces = mesher.generate()

    pm.plot(vertices, faces)




.. image-sg:: /examples/images/sphx_glr_gmsh-basic_004.png
   :alt: gmsh basic
   :srcset: /examples/images/sphx_glr_gmsh-basic_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 132-137

Writing to file
---------------
It's also possible to use the Python bindings to write a Gmsh ``.msh`` file.
This file can be opened using the Gmsh GUI to e.g. inspect the generated
mesh.

.. GENERATED FROM PYTHON SOURCE LINES 137-140

.. code-block:: Python


    mesher.write("my-mesh.msh")








.. GENERATED FROM PYTHON SOURCE LINES 141-150

Conclusion
----------

In real use, the vector geometries will be more complex, and not based on
just a few coordinate pairs. Such cases are presented in the other examples,
but the same principles apply: we may use polygons, linestrings and points
with associated cell sizes to steer the triangulation; unlike Triangle,
for Gmsh cell sizes can associated to linestrings and points, not just
polygons.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.344 seconds)


.. _sphx_glr_download_examples_gmsh-basic.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: gmsh-basic.ipynb <gmsh-basic.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: gmsh-basic.py <gmsh-basic.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

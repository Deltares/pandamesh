[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pandamesh"
description = "From geodataframe to mesh"
license = { text = "MIT" }
readme = { file = "README.rst", content-type = "text/x-rst" }
dynamic = ["version"]
maintainers = [{ name = "Huite Bootsma", email = "huite.bootsma@deltares.nl" }]
requires-python = ">=3.9"
dependencies = [
    'geopandas',  
    'pooch',
    'triangle',
    'shapely >= 2.0',
    'scipy',
]
classifiers = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: MIT License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: Implementation :: CPython',
    'Topic :: Scientific/Engineering',
]
keywords = ['mesh', 'geopandas', 'unstructured grid']

[project.urls]
Home = "https://github.com/deltares/pandamesh"
Code = "https://github.com/deltares/pandamesh"
Issues = "https://github.com/deltares/pandamesh/issues"

[project.optional-dependencies]
all = [
    'geopandas',
    'gmsh',
    'pooch',
    'triangle',
    'shapely >= 2.0',
    'matplotlib',
]

[tool.hatch.version]
path = "pandamesh/__init__.py"

[tool.hatch.build.targets.sdist]
only-include = ["pandamesh", "tests"]

[tool.isort]
profile = "black"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
   "@abc.abstractmethod",
]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
pandamesh = { path = ".", editable = true }

[tool.pixi.dependencies]
build = "*"
geopandas = "*"
python-gmsh = "*"
matplotlib = "*"
numpy = "*"
pooch = "*"
pip = "*"
pre-commit = "*"
pydata-sphinx-theme = "*"
py-triangle = "*"
pytest = "*"
pytest-cov = "*"
scipy = "*"
shapely = ">=2.0"
sphinx = "*"
sphinx-gallery = "*"
hatchling = "*"
jupyter = "*"
twine = "*"

[tool.pixi.tasks]
pre-commit = "pre-commit run --all-files"
test = "pytest --cov=pandamesh --cov-report xml --cov-report term"
docs = "sphinx-build docs docs/_build"
all = { depends_on = ["pre-commit", "test", "docs"]}
pypi-publish = { cmd = "rm --recursive --force dist && python -m build && twine check dist/* && twine upload dist/*" }

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"

[tool.pixi.feature.py309.dependencies]
python = "3.09.*"

[tool.pixi.environments]
default = { features = ["py312"], solve-group = "py312" }
py312 = { features = ["py312"], solve-group = "py312" }
py311 = ["py311"]
py310 = ["py310"]
py309 = ["py309"]


[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/
select = ["C4", "D2", "D3", "D4", "E", "F", "I", "NPY", "PD"]
ignore = [
    "D202",
    "D205",
    "D206",
    "D400",
    "D404",
    "E402",
    "E501",
    "E703",
    "PD002",
    "PD901",
    "PD003",
    "PD004",
    "PD011",
]
ignore-init-module-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"
